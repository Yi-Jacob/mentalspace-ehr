# Multi-stage build for NestJS backend
FROM node:20.12.2-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY apps/backend/package*.json ./apps/backend/

# Install ALL dependencies (including dev dependencies for build)
RUN npm install

# Copy source code
COPY . .

# Generate Prisma client
RUN npm run prisma:generate

# Build the application
RUN npm run build:backend

# Production stage
FROM node:20.12.2-alpine AS production

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

# Set working directory
WORKDIR /app

# Copy backend package files only
COPY apps/backend/package*.json ./

# Install production dependencies only
RUN npm install --only=production

# Copy built application
COPY --from=builder --chown=nestjs:nodejs /app/apps/backend/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/apps/backend/prisma ./prisma
COPY --from=builder --chown=nestjs:nodejs /app/apps/backend/scripts ./scripts

# Generate Prisma client in production
RUN npx prisma generate

# Copy entrypoint script
COPY docker-entrypoint.sh /app/docker-entrypoint.sh
RUN chmod +x /app/docker-entrypoint.sh

# Install netcat, curl, and wget for health checks
RUN apk add --no-cache netcat-openbsd curl wget

# Switch to non-root user
USER nestjs

# Expose port
EXPOSE 7000

# Health check - use curl to check the health endpoint with correct API prefix
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:7000/api/health || exit 1

# Start the application with entrypoint
ENTRYPOINT ["/app/docker-entrypoint.sh"]
