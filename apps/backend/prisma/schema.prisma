generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model DiagnosisCode {
  id          String   @id @default(uuid())
  code        String
  description String
  category    String?
  isActive    Boolean  @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("diagnosis_codes")
}

model User {
  id                            String                       @id @default(uuid())
  email                         String                       @unique
  authUserId                    String?                      @map("auth_user_id")
  password                      String?
  createdAt                     DateTime                     @default(now()) @map("created_at")
  firstName                     String                       @map("first_name")
  isActive                      Boolean?                     @map("is_active")
  lastName                      String                       @map("last_name")
  updatedAt                     DateTime                     @default(now()) @map("updated_at")
  middleName                    String?                      @map("middle_name")
  suffix                        String?
  userName                      String?                      @map("user_name")
  clientId                      String?                      @unique @map("client_id")
  staffId                       String?                      @unique @map("staff_id")
  waitlistEntries               AppointmentWaitlist[]
  userRoles                     UserRole[]
  claims                        Claim[]                      @relation("ClaimProvider")
  complianceDeadlines           ComplianceDeadline[]         @relation("ComplianceDeadlineProvider")
  clinicalNotes                 ClinicalNote[]               @relation("ClinicalNoteProvider")

  conversations                 Conversation[]               @relation("ConversationTherapist")
  clientConversations          Conversation[]                @relation("ConversationClient")
  messages                      Message[]                    @relation("MessageSender")
  conversationParticipants      ConversationParticipant[]    @relation("ConversationParticipant")
  messageReadReceipts           MessageReadReceipt[]         @relation("MessageReadReceipt")
  timeTracking                  TimeTracking[]               @relation("TimeTrackingUser")
  sessionCompletions            SessionCompletion[]          @relation("SessionCompletionProvider")
  deadlineExceptions            DeadlineExceptionRequest[]   @relation("DeadlineExceptionProvider")
  deadlineExceptionReviews      DeadlineExceptionRequest[]   @relation("DeadlineExceptionReviewer")
  timeEntries                   TimeEntry[]                  @relation("TimeEntryUser")
  timeEntryApprovals            TimeEntry[]                  @relation("TimeEntryApprovedBy")
  paymentCalculations           PaymentCalculation[]         @relation("PaymentCalculationUser")
  paymentCalculationProcessings PaymentCalculation[]         @relation("PaymentCalculationProcessedBy")
  performanceMetrics            PerformanceMetric[]          @relation("PerformanceMetricUser")
  performanceMetricReviews      PerformanceMetric[]          @relation("PerformanceMetricReviewer")
  trainingRecords               TrainingRecord[]             @relation("UserTrainingRecords")
  passwordResetTokens           PasswordResetToken[]
  supervisionAsSupervisor       SupervisionRelationship[]    @relation("SupervisionSupervisor")
  supervisionAsSupervisee       SupervisionRelationship[]    @relation("SupervisionSupervisee")
  licenses                      License[]
  chatSessions                 ChatSession[]                 @relation("UserChatSessions")
  client                        Client?                      @relation("UserClient", fields: [clientId], references: [id])
  staffProfile                  StaffProfile?                @relation("UserStaffProfile", fields: [staffId], references: [id])

  @@map("users")
}

model ChatSession {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  messages  Json[]   // Array of message objects with role and content
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user User @relation("UserChatSessions", fields: [userId], references: [id])

  @@map("chat_sessions")
}

model Payer {
  id                    String             @id @default(uuid())
  name                  String
  payerType             String             @map("payer_type")
  electronicPayerId     String?            @map("electronic_payer_id")
  addressLine1          String?            @map("address_line_1")
  addressLine2          String?            @map("address_line_2")
  city                  String?
  state                 String?
  zipCode               String?            @map("zip_code")
  phoneNumber           String?            @map("phone_number")
  faxNumber             String?            @map("fax_number")
  contactPerson         String?            @map("contact_person")
  contactEmail          String?            @map("contact_email")
  website               String?
  requiresAuthorization Boolean?           @map("requires_authorization")
  isActive              Boolean?           @map("is_active")
  notes                 String?
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @default(now()) @map("updated_at")
  claims                Claim[]
  payments              Payment[]
  payerContracts        PayerContract[]
  feeSchedules          PayerFeeSchedule[]
  clientInsurances      ClientInsurance[]

  @@map("payers")
}

model PayerContract {
  id                String    @id @default(uuid())
  payerId           String    @map("payer_id")
  contractName      String    @map("contract_name")
  contractNumber    String?   @map("contract_number")
  effectiveDate     DateTime  @default(now()) @map("effective_date")
  expirationDate    DateTime? @map("expiration_date")
  status            String?
  reimbursementRate Float?    @map("reimbursement_rate")
  contractTerms     String?   @map("contract_terms")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")
  payer             Payer     @relation(fields: [payerId], references: [id])

  @@map("payer_contracts")
}

model CptCode {
  id          String   @id @default(uuid())
  code        String
  description String
  isActive    Boolean  @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("cpt_codes")
}

model PayerFeeSchedule {
  id             String    @id @default(uuid())
  payerId        String    @map("payer_id")
  cptCode        String    @map("cpt_code")
  feeAmount      Float     @map("fee_amount")
  effectiveDate  DateTime  @default(now()) @map("effective_date")
  expirationDate DateTime? @map("expiration_date")
  isActive       Boolean?  @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  payer          Payer     @relation(fields: [payerId], references: [id])

  @@map("payer_fee_schedules")
}

model TrainingRecord {
  id                   String    @id @default(uuid())
  userId               String    @map("user_id")
  trainingTitle        String    @map("training_title")
  trainingType         String    @map("training_type")
  providerOrganization String?   @map("provider_organization")
  completionDate       DateTime? @map("completion_date")
  expiryDate           DateTime? @map("expiry_date")
  hoursCompleted       Float?
  certificateNumber    String?   @map("certificate_number")
  status               String?
  notes                String?
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @default(now()) @map("updated_at")
  user                 User      @relation("UserTrainingRecords", fields: [userId], references: [id])

  @@map("training_records")
}

model PerformanceMetric {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  metricType        String    @map("metric_type")
  metricValue       Float     @map("metric_value")
  targetValue       Float?    @map("target_value")
  measurementPeriod String    @map("measurement_period")
  periodStart       DateTime  @default(now()) @map("period_start")
  periodEnd         DateTime  @default(now()) @map("period_end")
  notes             String?
  reviewedBy        String?   @map("reviewed_by")
  reviewedAt        DateTime? @map("reviewed_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  user              User      @relation("PerformanceMetricUser", fields: [userId], references: [id])
  reviewer          User?     @relation("PerformanceMetricReviewer", fields: [reviewedBy], references: [id])

  @@map("performance_metrics")
}

model PaymentCalculation {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  payPeriodStart  DateTime @default(now()) @map("pay_period_start")
  payPeriodEnd    DateTime @default(now()) @map("pay_period_end")
  totalHours      Float?   @map("total_hours")
  totalAmount     Float?   @map("total_amount")
  grossAmount     Float?   @map("gross_amount")
  status          String?
  processedBy     String?  @map("processed_by")
  processedAt     DateTime @default(now()) @map("processed_at")
  notes           String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")
  user            User     @relation("PaymentCalculationUser", fields: [userId], references: [id])
  processedByUser User?    @relation("PaymentCalculationProcessedBy", fields: [processedBy], references: [id])

  @@map("payment_calculations")
}

model Client {
  id                     String                  @id @default(uuid())
  firstName              String                  @map("first_name")
  middleName             String?                 @map("middle_name")
  lastName               String                  @map("last_name")
  suffix                 String?
  preferredName          String?                 @map("preferred_name")
  pronouns               String?
  dateOfBirth            DateTime                @default(now()) @map("date_of_birth")
  administrativeSex      String?                 @map("administrative_sex")
  genderIdentity         String?                 @map("gender_identity")
  sexualOrientation      String?                 @map("sexual_orientation")
  email                  String?
  address1               String?                 @map("address_1")
  address2               String?                 @map("address_2")
  city                   String?
  state                  String?
  zipCode                String?                 @map("zip_code")
  timezone               String?
  race                   String?
  ethnicity              String?
  languages              String?
  maritalStatus          String?                 @map("marital_status")
  employmentStatus       String?                 @map("employment_status")
  religiousAffiliation   String?                 @map("religious_affiliation")
  smokingStatus          String?                 @map("smoking_status")
  appointmentReminders   String?                 @map("appointment_reminders")
  hipaaSigned            Boolean?                @map("hipaa_signed")
  pcpRelease             String?                 @map("pcp_release")
  patientComments        String?                 @map("patient_comments")
  assignedClinicianId    String?                 @map("assigned_clinician_id")
  assignedClinician      StaffProfile?           @relation("ClientAssignedClinician", fields: [assignedClinicianId], references: [id])
  createdBy              String?                 @map("created_by")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @default(now()) @map("updated_at")
  isActive               Boolean?                @map("is_active")
  appointments           Appointment[]
  waitlistEntries        AppointmentWaitlist[]
  claims                 Claim[]
  clinicalNotes          ClinicalNote[]
  timeTracking           TimeTracking[]
  sessionCompletions     SessionCompletion[]
  payments               Payment[]
  insuranceVerifications InsuranceVerification[]
  insurances             ClientInsurance[]
  patientStatements      PatientStatement[]
  user                   User?                   @relation("UserClient")

  @@map("clients")
}

model Appointment {
  id                 String         @id @default(uuid())
  clientId           String         @map("client_id")
  providerId         String         @map("provider_id")
  appointmentType    String         @map("appointment_type")
  title              String?
  description        String?
  startTime          DateTime       @map("start_time")
  duration           Int            @default(60)
  status             String         @map("status")
  location           String?
  roomNumber         String?        @map("room_number")
  recurringRuleId    String?        @map("recurring_rule_id")
  createdBy          String?        @map("created_by")
  cancelledBy        String?        @map("cancelled_by")
  cancelledDate      DateTime?      @map("cancelled_date")
  cancelledReason    String?        @map("cancelled_reason")
  clientApprovedDate DateTime?      @map("client_approved_date")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @default(now()) @map("updated_at")
  clients            Client         @relation(fields: [clientId], references: [id])
  staff              StaffProfile   @relation(fields: [providerId], references: [id])
  recurringRule      RecurringRule? @relation(fields: [recurringRuleId], references: [id])
  createdByStaff     StaffProfile?  @relation("AppointmentCreator", fields: [createdBy], references: [id])
  canceledByStaff    StaffProfile?  @relation("AppointmentCanceler", fields: [cancelledBy], references: [id])

  @@map("appointments")
}

model RecurringRule {
  id                String        @id @default(uuid())
  recurringPattern  String        @map("recurring_pattern")
  startDate         DateTime      @map("start_date")
  endDate           DateTime?     @map("end_date")
  timeSlots         Json          @map("time_slots")
  isBusinessDayOnly Boolean       @default(true) @map("is_business_day_only")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @default(now()) @map("updated_at")
  appointments      Appointment[]

  @@map("recurring_rules")
}

model ClientPrimaryCareProvider {
  id           String   @id @default(uuid())
  clientId     String   @map("client_id")
  providerName String?  @map("provider_name")
  practiceName String?  @map("practice_name")
  phoneNumber  String?  @map("phone_number")
  address      String?
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("client_primary_care_providers")
}

model Claim {
  id                    String          @id @default(uuid())
  claimNumber           String          @map("claim_number")
  clientId              String          @map("client_id")
  providerId            String          @map("provider_id")
  payerId               String?         @map("payer_id")
  serviceDate           DateTime        @default(now()) @map("service_date")
  submissionDate        DateTime?       @map("submission_date")
  status                String?         @map("status")
  totalAmount           Float           @map("total_amount")
  paidAmount            Float?          @map("paid_amount")
  patientResponsibility Float?          @map("patient_responsibility")
  authorizationNumber   String?         @map("authorization_number")
  diagnosisCodes        String[]        @map("diagnosis_codes")
  procedureCodes        String[]        @map("procedure_codes")
  placeOfService        String?         @map("place_of_service")
  claimFrequency        String?         @map("claim_frequency")
  batchId               String?         @map("batch_id")
  clearinghouseId       String?         @map("clearinghouse_id")
  submissionMethod      String?         @map("submission_method")
  rejectionReason       String?         @map("rejection_reason")
  denialReason          String?         @map("denial_reason")
  notes                 String?
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @default(now()) @map("updated_at")
  client                Client          @relation(fields: [clientId], references: [id])
  provider              User            @relation("ClaimProvider", fields: [providerId], references: [id])
  payer                 Payer?          @relation(fields: [payerId], references: [id])
  lineItems             ClaimLineItem[]
  payments              Payment[]
  statementLineItems    StatementLineItem[]

  @@map("claims")
}

model ComplianceDeadline {
  id                 String   @id @default(uuid())
  providerId         String   @map("provider_id")
  deadlineType       String   @map("deadline_type")
  deadlineDate       DateTime @default(now()) @map("deadline_date")
  isMet              Boolean? @map("is_met")
  notesPending       Int?     @map("notes_pending")
  notesCompleted     Int?     @map("notes_completed")
  reminderSent24h    Boolean? @map("reminder_sent_24h")
  reminderSent48h    Boolean? @map("reminder_sent_48h")
  reminderSent72h    Boolean? @map("reminder_sent_72h")
  supervisorNotified Boolean? @map("supervisor_notified")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @map("updated_at")
  provider           User     @relation("ComplianceDeadlineProvider", fields: [providerId], references: [id])

  @@map("compliance_deadlines")
}

model UserRole {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  role       String   @map("role")
  assignedBy String?  @map("assigned_by")
  assignedAt DateTime @default(now()) @map("assigned_at")
  isActive   Boolean? @map("is_active")
  user       User     @relation(fields: [userId], references: [id])

  @@map("user_roles")
}

model StaffProfile {
  id                    String                       @id @default(uuid())
  employeeId            String?                      @map("employee_id")
  npiNumber             String?                      @map("npi_number")
  licenseNumber         String?                      @map("license_number")
  licenseState          String?                      @map("license_state")
  licenseExpiryDate     DateTime                     @default(now()) @map("license_expiry_date")
  department            String?
  jobTitle              String?                      @map("job_title")
  hireDate              DateTime                     @default(now()) @map("hire_date")
  terminationDate       DateTime?                    @map("termination_date")
  phoneNumber           String?                      @map("phone_number")
  emergencyContactName  String?                      @map("emergency_contact_name")
  emergencyContactPhone String?                      @map("emergency_contact_phone")
  supervisorId          String?                      @map("supervisor_id")
  billingRate           Float?                       @map("billing_rate")
  canBillInsurance      Boolean?                     @map("can_bill_insurance")
  status                String?                      @map("status")
  notes                 String?
  createdAt             DateTime                     @default(now()) @map("created_at")
  updatedAt             DateTime                     @default(now()) @map("updated_at")
  address1              String?                      @map("address_1")
  address2              String?                      @map("address_2")
  canReceiveText        Boolean?                     @map("can_receive_text")
  city                  String?
  clinicianType         String?                      @map("clinician_type")
  formalName            String?                      @map("formal_name")
  homePhone             String?                      @map("home_phone")
  mobilePhone           String?                      @map("mobile_phone")
  state                 String?
  supervisionType       String?                      @map("supervision_type")
  userComments          String?                      @map("user_comments")
  workPhone             String?                      @map("work_phone")
  zipCode               String?                      @map("zip_code")
  appointments          Appointment[]
  createdAppointments   Appointment[]                @relation("AppointmentCreator")
  canceledAppointments  Appointment[]                @relation("AppointmentCanceler")
  providerCompensations ProviderCompensationConfig[] @relation("ProviderCompensationProvider")
  user                  User?                        @relation("UserStaffProfile")
  verifiedInsurances    InsuranceVerification[]
  adjustments           Adjustment[]
  patientStatements     PatientStatement[]
  assignedClients       Client[]                  @relation("ClientAssignedClinician")

  @@map("staff_profiles")
}

model QuickAction {
  id          String    @id @default(uuid())
  userId      String    @default(uuid()) @map("user_id")
  actionType  String    @map("action_type")
  title       String
  description String?
  priority    Int?
  dueDate     DateTime  @default(now()) @map("due_date")
  completed   Boolean?
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  @@map("quick_actions")
}

model ProductivityGoal {
  id           String   @id @default(uuid())
  userId       String   @default(uuid()) @map("user_id")
  goalType     String   @map("goal_type")
  targetValue  Int      @map("target_value")
  date         DateTime @default(now()) @map("date")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  currentValue Int?

  @@map("productivity_goals")
}

model ClientPhoneNumber {
  id                String   @id @default(uuid())
  clientId          String   @map("client_id")
  phoneType         String   @map("phone_type")
  phoneNumber       String   @map("phone_number")
  messagePreference String?  @map("message_preference")
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("client_phone_numbers")
}

model Payment {
  id                 String   @id @default(uuid())
  paymentNumber      String   @map("payment_number")
  clientId           String   @map("client_id")
  claimId            String?  @map("claim_id")
  payerId            String?  @map("payer_id")
  paymentDate        DateTime @default(now()) @map("payment_date")
  paymentMethod      String   @map("payment_method")
  paymentAmount      Float    @map("payment_amount")
  status             String?  @map("status")
  referenceNumber    String?  @map("reference_number")
  creditCardLastFour String?  @map("credit_card_last_four")
  paymentProcessor   String?  @map("payment_processor")
  processingFee      Float?   @map("processing_fee")
  netAmount          Float?   @map("net_amount")
  notes              String?
  processedBy        String?  @map("processed_by")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @map("updated_at")
  client             Client   @relation(fields: [clientId], references: [id])
  claim              Claim?   @relation(fields: [claimId], references: [id])
  payer              Payer?   @relation(fields: [payerId], references: [id])
  allocations        PaymentAllocation[]
  adjustments        Adjustment[]

  @@map("payments")
}

model Certification {
  id                  String   @id @default(uuid())
  userId              String   @map("user_id")
  certificationName   String   @map("certification_name")
  certificationNumber String?  @map("certification_number")
  issuingOrganization String   @map("issuing_organization")
  issueDate           DateTime @default(now()) @map("issue_date")
  expiryDate          DateTime @default(now()) @map("expiry_date")
  renewalPeriodMonths Int?     @map("renewal_period_months")
  status              String?
  reminderSent30Days  Boolean? @map("reminder_sent_30_days")
  reminderSent60Days  Boolean? @map("reminder_sent_60_days")
  reminderSent90Days  Boolean? @map("reminder_sent_90_days")
  notes               String?
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @map("updated_at")

  @@map("certifications")
}

model AppointmentReminder {
  id                String   @id @default(uuid())
  appointmentId     String   @map("appointment_id")
  reminderType      String   @map("reminder_type")
  sendBeforeMinutes Int      @map("send_before_minutes")
  sentAt            DateTime @default(now()) @map("sent_at")
  isSent            Boolean? @map("is_sent")
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("appointment_reminders")
}

model ClientEmergencyContact {
  id           String   @id @default(uuid())
  clientId     String   @map("client_id")
  name         String
  relationship String?
  phoneNumber  String?  @map("phone_number")
  email        String?
  isPrimary    Boolean? @map("is_primary")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("client_emergency_contacts")
}

model TimeEntry {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  entryDate      DateTime  @default(now()) @map("entry_date")
  clockInTime    DateTime  @default(now()) @map("clock_in_time")
  clockOutTime   DateTime? @map("clock_out_time")
  breakStartTime DateTime? @map("break_start_time")
  breakEndTime   DateTime? @map("break_end_time")
  totalHours     Float?    @map("total_hours")
  regularHours   Float?    @map("regular_hours")
  eveningHours   Float?    @map("evening_hours")
  weekendHours   Float?    @map("weekend_hours")
  isApproved     Boolean?  @default(false) @map("is_approved")
  approvedBy     String?   @map("approved_by")
  approvedAt     DateTime? @map("approved_at")
  notes          String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  user           User      @relation("TimeEntryUser", fields: [userId], references: [id])
  approvedByUser User?     @relation("TimeEntryApprovedBy", fields: [approvedBy], references: [id])

  @@map("time_entries")
}

model ScheduleException {
  id            String   @id @default(uuid())
  providerId    String   @map("provider_id")
  exceptionDate DateTime @default(now()) @map("exception_date")
  startTime     String?  @map("start_time")
  endTime       String?  @map("end_time")
  isUnavailable Boolean? @map("is_unavailable")
  reason        String?
  approvedBy    String?  @map("approved_by")
  approvedAt    DateTime @default(now()) @map("approved_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  @@map("schedule_exceptions")
}

model ClinicalNote {
  id          String        @id @default(uuid())
  clientId    String        @map("client_id")
  providerId  String        @map("provider_id")
  noteType    String        @map("note_type")
  title       String
  content     Json
  status      String?       @map("status")
  signedAt    DateTime      @default(now()) @map("signed_at")
  signedBy    String?       @map("signed_by")
  approvedAt  DateTime      @default(now()) @map("approved_at")
  approvedBy  String?       @map("approved_by")
  coSignedAt  DateTime      @default(now()) @map("co_signed_at")
  coSignedBy  String?       @map("co_signed_by")
  lockedAt    DateTime      @default(now()) @map("locked_at")
  version     Int?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @map("updated_at")
  client      Client        @relation(fields: [clientId], references: [id])
  provider    User          @relation("ClinicalNoteProvider", fields: [providerId], references: [id])
  noteHistory NoteHistory[]

  @@map("clinical_notes")
}

model ProviderCompensationConfig {
  id                  String       @id @default(uuid())
  providerId          String       @map("provider_id")
  compensationType    String       @map("compensation_type")
  baseSessionRate     Float?       @map("base_session_rate")
  baseHourlyRate      Float?       @map("base_hourly_rate")
  experienceTier      Int?         @map("experience_tier")
  isOvertimeEligible  Boolean?     @map("is_overtime_eligible")
  eveningDifferential Float?       @map("evening_differential")
  weekendDifferential Float?       @map("weekend_differential")
  effectiveDate       DateTime     @default(now()) @map("effective_date")
  expirationDate      DateTime?    @map("expiration_date")
  isActive            Boolean?     @map("is_active")
  createdAt           DateTime     @default(now()) @map("created_at")
  updatedAt           DateTime     @default(now()) @map("updated_at")
  createdBy           String?      @map("created_by")
  provider            StaffProfile @relation("ProviderCompensationProvider", fields: [providerId], references: [id])

  @@map("provider_compensation_config")
}

model ClientInsurance {
  id                     String                  @id @default(uuid())
  clientId               String                  @map("client_id")
  payerId                String?                 @map("payer_id")
  insuranceType          String?                 @map("insurance_type")
  insuranceCompany       String?                 @map("insurance_company")
  policyNumber           String?                 @map("policy_number")
  groupNumber            String?                 @map("group_number")
  subscriberName         String?                 @map("subscriber_name")
  subscriberDob          DateTime                @default(now()) @map("subscriber_dob")
  subscriberRelationship String?                 @map("subscriber_relationship")
  effectiveDate          DateTime                @default(now()) @map("effective_date")
  terminationDate        DateTime?               @map("termination_date")
  copayAmount            Float?                  @map("copay_amount")
  deductibleAmount       Float?                  @map("deductible_amount")
  isActive               Boolean?                @map("is_active")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @default(now()) @map("updated_at")
  client                 Client                  @relation(fields: [clientId], references: [id])
  payer                  Payer?                  @relation(fields: [payerId], references: [id])
  verifications          InsuranceVerification[]

  @@map("client_insurance")
}

model SessionRateMultiplier {
  id              String   @id @default(uuid())
  providerId      String   @map("provider_id")
  sessionType     String   @map("session_type")
  multiplier      Float    @map("multiplier")
  durationMinutes Int      @map("duration_minutes")
  isActive        Boolean? @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("session_rate_multipliers")
}

model Conversation {
  id            String                    @id @default(uuid())
  title         String?
  clientId      String?                   @map("client_id")
  therapistId   String?                   @map("therapist_id")
  category      String?
  priority      String?
  status        String?
  createdBy     String?                   @map("created_by")
  createdAt     DateTime                  @default(now()) @map("created_at")
  updatedAt     DateTime                  @default(now()) @map("updated_at")
  lastMessageAt DateTime                  @default(now()) @map("last_message_at")
  type          String                    @default("individual")
  client        User?                     @relation("ConversationClient", fields: [clientId], references: [id])
  therapist     User?                     @relation("ConversationTherapist", fields: [therapistId], references: [id])
  messages      Message[]
  participants  ConversationParticipant[]

  @@map("conversations")
}

model PatientStatement {
  id               String   @id @default(uuid())
  statementNumber  String   @map("statement_number")
  clientId         String   @map("client_id")
  statementDate    DateTime @default(now()) @map("statement_date")
  dueDate          DateTime @default(now()) @map("due_date")
  totalAmount      Float    @map("total_amount")
  previousBalance  Float?   @map("previous_balance")
  paymentsReceived Float?   @map("payments_received")
  adjustments      Float?   @map("adjustments")
  currentBalance   Float    @map("current_balance")
  status           String?
  deliveryMethod   String?  @map("delivery_method")
  emailSentAt      DateTime? @map("email_sent_at")
  emailOpenedAt    DateTime? @map("email_opened_at")
  paymentLink      String?  @map("payment_link")
  notes            String?
  createdBy        String?  @map("created_by")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
  client           Client   @relation(fields: [clientId], references: [id])
  createdByStaff   StaffProfile? @relation(fields: [createdBy], references: [id])
  lineItems        StatementLineItem[]

  @@map("patient_statements")
}

model ClaimLineItem {
  id                    String   @id @default(uuid())
  claimId               String   @map("claim_id")
  serviceDate           DateTime @default(now()) @map("service_date")
  cptCode               String   @map("cpt_code")
  modifier1             String?  @map("modifier_1")
  modifier2             String?  @map("modifier_2")
  modifier3             String?  @map("modifier_3")
  modifier4             String?  @map("modifier_4")
  diagnosisPointer      Int?     @map("diagnosis_pointer")
  units                 Int?
  chargeAmount          Float    @map("charge_amount")
  allowedAmount         Float?   @map("allowed_amount")
  paidAmount            Float?   @map("paid_amount")
  adjustmentAmount      Float?   @map("adjustment_amount")
  patientResponsibility Float?   @map("patient_responsibility")
  lineNote              String?  @map("line_note")
  createdAt             DateTime @default(now()) @map("created_at")
  claim                 Claim    @relation(fields: [claimId], references: [id])
  paymentAllocations    PaymentAllocation[]
  adjustments           Adjustment[]
  statementLineItems    StatementLineItem[]

  @@map("claim_line_items")
}

model AppointmentWaitlist {
  id                     String   @id @default(uuid())
  clientId               String   @map("client_id")
  providerId             String   @map("provider_id")
  preferredDate          DateTime @default(now()) @map("preferred_date")
  preferredTimeStart     String?  @map("preferred_time_start")
  preferredTimeEnd       String?  @map("preferred_time_end")
  appointmentType        String   @map("appointment_type")
  notes                  String?
  priority               Int?
  createdAt              DateTime @default(now()) @map("created_at")
  notifiedAt             DateTime @default(now()) @map("notified_at")
  isFulfilled            Boolean? @map("is_fulfilled")
  fulfilledAppointmentId String?  @map("fulfilled_appointment_id")
  clients                Client   @relation(fields: [clientId], references: [id])
  users                  User     @relation(fields: [providerId], references: [id])

  @@map("appointment_waitlist")
}

model PaymentAllocation {
  id              String   @id @default(uuid())
  paymentId       String   @map("payment_id")
  claimLineItemId String   @map("claim_line_item_id")
  allocatedAmount Float    @map("allocated_amount")
  allocationType  String?  @map("allocation_type")
  createdAt       DateTime @default(now()) @map("created_at")
  payment         Payment  @relation(fields: [paymentId], references: [id])
  claimLineItem   ClaimLineItem @relation(fields: [claimLineItemId], references: [id])

  @@map("payment_allocations")
}

model Adjustment {
  id              String   @id @default(uuid())
  claimLineItemId String   @map("claim_line_item_id")
  paymentId       String?  @map("payment_id")
  sourceType      String   @map("source_type") // 'insurance' or 'practice'
  groupCode       String   @map("group_code") // 'CO', 'PR', 'OA', 'PI'
  reasonCode      String   @map("reason_code") // CARC codes
  amount          Float    @map("amount")
  reasonText      String?  @map("reason_text")
  createdById     String?  @map("created_by_id")
  createdAt       DateTime @default(now()) @map("created_at")
  claimLineItem   ClaimLineItem @relation(fields: [claimLineItemId], references: [id])
  payment         Payment? @relation(fields: [paymentId], references: [id])
  createdBy       StaffProfile? @relation(fields: [createdById], references: [id])

  @@map("adjustments")
}

model SupervisionRelationship {
  id               String    @id @default(uuid())
  supervisorId     String    @map("supervisor_id")
  superviseeId     String    @map("supervisee_id")
  startDate        DateTime  @default(now()) @map("start_date")
  endDate          DateTime? @map("end_date")
  createdAt        DateTime  @default(now()) @map("created_at")
  notes            String?
  status           String    @default("active")
  terminationNotes String?   @map("termination_notes")
  updatedAt        DateTime  @default(now()) @map("updated_at")
  supervisor       User      @relation("SupervisionSupervisor", fields: [supervisorId], references: [id])
  supervisee       User      @relation("SupervisionSupervisee", fields: [superviseeId], references: [id])

  @@map("supervision_relationships")
}

model TreatmentGoal {
  id              String    @id @default(uuid())
  clientId        String    @map("client_id")
  treatmentPlanId String?   @map("treatment_plan_id")
  goalText        String    @map("goal_text")
  targetDate      DateTime  @default(now()) @map("target_date")
  achievedDate    DateTime? @map("achieved_date")
  isAchieved      Boolean?  @map("is_achieved")
  priority        Int?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @map("updated_at")

  @@map("treatment_goals")
}

model InsuranceVerification {
  id                    String          @id @default(uuid())
  clientId              String          @map("client_id")
  insuranceId           String          @map("insurance_id")
  verificationDate      DateTime        @default(now()) @map("verification_date")
  verifiedBy            String?         @map("verified_by")
  status                String?         @map("status")
  benefitsVerified      Boolean?        @map("benefits_verified")
  copayAmount           Float?          @map("copay_amount")
  deductibleAmount      Float?          @map("deductible_amount")
  deductibleMet         Float?          @map("deductible_met")
  outOfPocketMax        Float?          @map("out_of_pocket_max")
  outOfPocketMet        Float?          @map("out_of_pocket_met")
  authorizationRequired Boolean?        @map("authorization_required")
  authorizationNumber   String?         @map("authorization_number")
  authorizationExpiry   DateTime        @default(now()) @map("authorization_expiry")
  coveredServices       String[]        @map("covered_services")
  excludedServices      String[]        @map("excluded_services")
  notes                 String?
  nextVerificationDate  DateTime        @default(now()) @map("next_verification_date")
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @default(now()) @map("updated_at")
  client                Client          @relation(fields: [clientId], references: [id])
  insurance             ClientInsurance @relation(fields: [insuranceId], references: [id])
  verifiedByStaff       StaffProfile?   @relation(fields: [verifiedBy], references: [id])

  @@map("insurance_verifications")
}

model Message {
  id             String               @id @default(uuid())
  conversationId String               @map("conversation_id")
  senderId       String               @map("sender_id")
  content        String
  messageType    String?              @map("message_type")
  priority       String?
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @default(now()) @map("updated_at")
  replyToId      String?              @map("reply_to_id")
  conversation   Conversation         @relation(fields: [conversationId], references: [id])
  sender         User                 @relation("MessageSender", fields: [senderId], references: [id])
  replyTo        Message?             @relation("MessageReply", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies        Message[]            @relation("MessageReply")
  readReceipts   MessageReadReceipt[]

  @@map("messages")
}

model PracticeSetting {
  id                    String   @id @default(uuid())
  userId                String   @unique @map("user_id")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @default(now()) @map("updated_at")
  practiceName          String?  @map("practice_name")
  practiceAddress       Json?    @map("practice_address")
  practiceContact       Json?    @map("practice_contact")
  businessHours         Json?    @map("business_hours")
  securitySettings      Json?    @map("security_settings")
  portalSettings        Json?    @map("portal_settings")
  schedulingSettings    Json?    @map("scheduling_settings")
  documentationSettings Json?    @map("documentation_settings")
  billingSettings       Json?    @map("billing_settings")

  @@map("practice_settings")
}

model TimeTracking {
  id                   String    @id @default(uuid())
  userId               String    @map("user_id")
  clientId             String    @map("client_id")
  startTime            DateTime  @default(now()) @map("start_time")
  endTime              DateTime? @map("end_time")
  breakDurationMinutes Int?      @map("break_duration_minutes")
  totalHours           Float?    @map("total_hours")
  activityType         String    @map("activity_type")
  description          String?
  isBillable           Boolean?  @map("is_billable")
  status               String?
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @default(now()) @map("updated_at")
  user                 User      @relation("TimeTrackingUser", fields: [userId], references: [id])
  client               Client    @relation(fields: [clientId], references: [id])

  @@map("time_tracking")
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  conversationId String       @map("conversation_id")
  userId         String       @map("user_id")
  role           String       @default("participant")
  joinedAt       DateTime     @default(now()) @map("joined_at")
  leftAt         DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation("ConversationParticipant", fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversation_participants")
}

model MessageReadReceipt {
  id        String   @id @default(uuid())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  readAt    DateTime @default(now()) @map("read_at")
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation("MessageReadReceipt", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_read_receipts")
}

model StatementLineItem {
  id                    String   @id @default(uuid())
  statementId           String   @map("statement_id")
  claimId               String?  @map("claim_id")
  claimLineItemId       String?  @map("claim_line_item_id")
  serviceDate           DateTime @default(now()) @map("service_date")
  description           String
  cptCode               String?  @map("cpt_code")
  chargeAmount          Float    @map("charge_amount")
  insurancePayment      Float?   @map("insurance_payment")
  adjustmentAmount      Float?   @map("adjustment_amount")
  patientResponsibility Float    @map("patient_responsibility")
  createdAt             DateTime @default(now()) @map("created_at")
  statement             PatientStatement @relation(fields: [statementId], references: [id])
  claim                 Claim? @relation(fields: [claimId], references: [id])
  claimLineItem         ClaimLineItem? @relation(fields: [claimLineItemId], references: [id])

  @@map("statement_line_items")
}

model SessionCompletion {
  id                       String   @id @default(uuid())
  appointmentId            String   @map("appointment_id")
  providerId               String   @map("provider_id")
  clientId                 String   @map("client_id")
  sessionType              String   @map("session_type")
  durationMinutes          Int      @map("duration_minutes")
  sessionDate              DateTime @default(now()) @map("session_date")
  noteId                   String?  @map("note_id")
  isNoteSigned             Boolean? @map("is_note_signed")
  noteSignedAt             DateTime @default(now()) @map("note_signed_at")
  isLocked                 Boolean? @map("is_locked")
  lockedAt                 DateTime @default(now()) @map("locked_at")
  calculatedAmount         Float?   @map("calculated_amount")
  payPeriodWeek            DateTime @default(now()) @map("pay_period_week")
  isPaid                   Boolean? @map("is_paid")
  supervisorOverrideBy     String?  @map("supervisor_override_by")
  supervisorOverrideReason String?  @map("supervisor_override_reason")
  supervisorOverrideAt     DateTime @default(now()) @map("supervisor_override_at")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @default(now()) @map("updated_at")
  provider                 User     @relation("SessionCompletionProvider", fields: [providerId], references: [id])
  client                   Client   @relation(fields: [clientId], references: [id])

  @@map("session_completions")
}

model DeadlineExceptionRequest {
  id                      String   @id @default(uuid())
  providerId              String   @map("provider_id")
  sessionCompletionId     String   @map("session_completion_id")
  requestedExtensionUntil DateTime @default(now()) @map("requested_extension_until")
  reason                  String
  status                  String?  @map("status")
  reviewedBy              String?  @map("reviewed_by")
  reviewedAt              DateTime @default(now()) @map("reviewed_at")
  reviewNotes             String?  @map("review_notes")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @default(now()) @map("updated_at")
  provider                User     @relation("DeadlineExceptionProvider", fields: [providerId], references: [id])
  reviewedByUser          User?    @relation("DeadlineExceptionReviewer", fields: [reviewedBy], references: [id])

  @@map("deadline_exception_requests")
}

model ProviderSchedule {
  id             String    @id @default(uuid())
  providerId     String    @map("provider_id")
  dayOfWeek      String    @map("day_of_week")
  startTime      String    @map("start_time")
  endTime        String    @map("end_time")
  isAvailable    Boolean?  @map("is_available")
  breakStartTime String?   @map("break_start_time")
  breakEndTime   String?   @map("break_end_time")
  effectiveFrom  DateTime  @default(now()) @map("effective_from")
  effectiveUntil DateTime? @map("effective_until")
  status         String?   @map("status")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")

  @@map("provider_schedules")
}

model License {
  id                    String   @id @default(uuid())
  staffId               String   @map("staff_id")
  licenseType           String   @map("license_type")
  licenseNumber         String   @map("license_number")
  licenseExpirationDate DateTime @map("license_expiration_date")
  licenseStatus         String   @map("license_status")
  licenseState          String   @map("license_state")
  issuedBy              String   @map("issued_by")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @default(now()) @map("updated_at")
  staff                 User     @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("licenses")
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  token     String    @unique
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id])

  @@map("password_reset_tokens")
}

model NoteHistory {
  id             String       @id(map: "note_versions_pkey") @default(dbgenerated("gen_random_uuid()"))
  noteId         String       @map("note_id")
  version        Int
  content        Json
  createdAt      DateTime     @default(now()) @map("created_at")
  status         String?
  title          String?
  updatedContent Boolean?     @default(false) @map("updated_content")
  updatedStatus  Boolean?     @default(false) @map("updated_status")
  updatedTitle   Boolean?     @default(false) @map("updated_title")
  note           ClinicalNote @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId], map: "idx_note_history_note_id")
  @@index([version], map: "idx_note_history_version")
  @@map("note_history")
}

model AuditLog {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  userEmail     String    @map("user_email")
  userRole      String?   @map("user_role")
  action        String    // 'CREATE' | 'READ' | 'UPDATE' | 'DELETE' | 'LOGIN' | 'LOGOUT' | 'ACCESS'
  resource      String    // Table/entity name (e.g., 'ClinicalNote', 'Client', 'User')
  resourceId    String?   @map("resource_id") // ID of the affected resource
  description   String    // What happened
  ipAddress     String?   @map("ip_address")
  userAgent     String?   @map("user_agent")
  deviceType    String?   @map("device_type") // 'desktop' | 'mobile' | 'tablet' | 'unknown'
  browser       String?   // Browser name (Chrome, Firefox, Safari, etc.)
  os            String?   // Operating system (Windows, macOS, iOS, Android, etc.)
  oldValues     Json?     @map("old_values") // Previous values for updates
  newValues     Json?     @map("new_values") // New values for creates/updates
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Essential indexes for HIPAA compliance queries
  @@index([userId], map: "idx_audit_log_user_id")
  @@index([action], map: "idx_audit_log_action")
  @@index([resource], map: "idx_audit_log_resource")
  @@index([createdAt], map: "idx_audit_log_created_at")
  @@index([deviceType], map: "idx_audit_log_device_type")
  @@map("audit_logs")
}
